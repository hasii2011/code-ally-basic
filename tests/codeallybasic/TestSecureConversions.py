from typing import cast
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from codeallybasic.SecureConversions import SecureConversions


NONE_STR: str = cast(str, None)


class TestSecureConversions(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo - Humberto A. Sanchez II
        Generated: 08 January 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testStrFloatToInt(self):

        retValue: int = SecureConversions.strFloatToInt('23.0')

        self.assertEqual(23, retValue, 'Conversion failed')

    def testStrIntLikeFloatToInt(self):

        retValue: int = SecureConversions.strFloatToInt('23')

        self.assertEqual(23, retValue, 'Conversion failed')

    def testStrFloatToIntThrowsException(self):
        """
        Assumes assertions turned on
        """
        with self.assertRaises(AssertionError):
            SecureConversions.strFloatToInt('aa')

    def testSecureIntegerNoneValue(self):
        with self.assertRaises(AssertionError):
            SecureConversions.secureInteger(NONE_STR)

    def testSecureIntegerEmptyValue(self):
        with self.assertRaises(AssertionError):
            SecureConversions.secureInteger('')

    def testSecureBooleanNone(self):
        with self.assertRaises(AssertionError):
            SecureConversions.secureBoolean(NONE_STR)

    def testSecureFloatNone(self):
        with self.assertRaises(AssertionError):
            SecureConversions.secureFloat(NONE_STR)

    def testSecureStringGood(self):
        goodString: str = 'I am good'
        actualStr: str = SecureConversions.secureString(possibleString=goodString)

        self.assertEqual(goodString, actualStr, 'Something did not convert')

    def testSecureStringNone(self):
        noneString: str = cast(str, None)
        actualStr:  str = SecureConversions.secureString(possibleString=noneString)

        self.assertEqual('', actualStr, 'Should have received an empty stirng')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestSecureConversions))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
